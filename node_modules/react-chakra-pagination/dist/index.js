

function ___$insertStyle(css) {
    if (!css || typeof window === 'undefined') {
        return;
    }
    const style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    document.head.appendChild(style);
    return css;
}

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var react = require('@chakra-ui/react');
var reactTable = require('react-table');
var md = require('react-icons/md');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

function generatePagesArray(from, to) {
    return __spreadArray([], new Array(to - from)).map(function (_, index) { return from + index + 1; })
        .filter(function (page) { return page > 0; });
}
function usePagination(_a) {
    var totalRegisters = _a.totalRegisters, page = _a.page, items = _a.items, _b = _a.registersPerPage, registersPerPage = _b === void 0 ? 10 : _b, _c = _a.siblingsCount, siblingsCount = _c === void 0 ? 1 : _c;
    var currentPage = page;
    var lastPage = Math.ceil(totalRegisters / registersPerPage);
    var totalPages = lastPage === 0 ? 1 : lastPage;
    var previousPages = currentPage > 1
        ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1)
        : [];
    var nextPages = currentPage < lastPage
        ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage))
        : [];
    var pageStart = (page - 1) * registersPerPage;
    var pageEnd = pageStart + registersPerPage;
    var pageItems = items.slice(pageStart, pageEnd);
    return {
        pageItems: pageItems,
        currentPage: currentPage,
        totalPages: totalPages,
        lastPage: lastPage,
        nextPages: nextPages,
        previousPages: previousPages,
        registersPerPage: registersPerPage,
        siblingsCount: siblingsCount,
    };
}

function NoContent(_a) {
    var icon = _a.icon, text = _a.text, children = _a.children, noShadow = _a.noShadow;
    return (React__default["default"].createElement(react.Flex, { mt: "8", mb: "12", p: "10", borderRadius: "8", direction: "column", align: "center", justify: "center", boxShadow: noShadow ? "unset" : "sm", h: "100%" },
        icon && (React__default["default"].createElement(react.Flex, { p: "6", align: "center", justify: "baseline", borderRadius: "full", bg: "gray.50" },
            React__default["default"].createElement(react.Icon, { as: icon, fontSize: "24", color: "teal.700" }))),
        React__default["default"].createElement(react.Text, { mt: "4" }, text),
        children));
}

function PaginationItem(_a) {
    var _b = _a.isCurrent, isCurrent = _b === void 0 ? false : _b, page = _a.page, onPageChange = _a.onPageChange, colorScheme = _a.colorScheme;
    if (isCurrent) {
        return (React__default["default"].createElement(react.Button, { size: "sm", fontSize: "xs", width: "4", colorScheme: colorScheme, disabled: true, _disabled: {
                bg: colorScheme + ".500",
                cursor: "pointer",
            } }, page));
    }
    return (React__default["default"].createElement(react.Button, { size: "sm", fontSize: "xs", width: "4", bg: "gray.100", _hover: {
            bg: "gray.300",
        }, onClick: function () { return onPageChange(page); } }, page));
}

function Pagination(_a) {
    var currentPage = _a.currentPage, lastPage = _a.lastPage, previousPages = _a.previousPages, nextPages = _a.nextPages, siblingsCount = _a.siblingsCount, onPageChange = _a.onPageChange, colorScheme = _a.colorScheme;
    return (React__default["default"].createElement(react.Stack, { direction: "row", mt: "8", justify: "flex-end", align: "center", spacing: "6" },
        React__default["default"].createElement(react.Stack, { direction: "row", spacing: "4" },
            currentPage > 1 + siblingsCount ? (React__default["default"].createElement(React__default["default"].Fragment, null,
                React__default["default"].createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: 1 }),
                currentPage > 2 + siblingsCount ? (React__default["default"].createElement(react.Text, { color: "gray.300", w: "8", textAlign: "center" }, "...")) : null)) : null,
            previousPages.length > 0
                ? previousPages.map(function (page) { return (React__default["default"].createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: page, key: page })); })
                : null,
            React__default["default"].createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: currentPage, isCurrent: true }),
            nextPages.length > 0
                ? nextPages.map(function (page) { return (React__default["default"].createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: page, key: page })); })
                : null,
            currentPage + siblingsCount < lastPage ? (React__default["default"].createElement(React__default["default"].Fragment, null,
                currentPage + 1 + siblingsCount < lastPage ? (React__default["default"].createElement(react.Text, { color: "gray.300", w: "8", textAlign: "center" }, "...")) : null,
                React__default["default"].createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: lastPage }))) : null)));
}

function Table(_a) {
    var _b, _c, _d;
    var page = _a.page, onPageChange = _a.onPageChange, totalRegisters = _a.totalRegisters, data = _a.data, columns = _a.columns, _e = _a.colorScheme, colorScheme = _e === void 0 ? "teal" : _e, emptyData = _a.emptyData;
    var pagination = usePagination({
        totalRegisters: totalRegisters,
        page: page,
        items: data,
    });
    var _f = reactTable.useTable({ columns: columns, data: pagination.pageItems }), getTableProps = _f.getTableProps, getTableBodyProps = _f.getTableBodyProps, headerGroups = _f.headerGroups, rows = _f.rows, prepareRow = _f.prepareRow;
    if (data.length === 0) {
        return (React__default["default"].createElement(NoContent, __assign({}, emptyData, { icon: (_b = emptyData === null || emptyData === void 0 ? void 0 : emptyData.icon) !== null && _b !== void 0 ? _b : md.MdBrokenImage, text: (_c = emptyData === null || emptyData === void 0 ? void 0 : emptyData.text) !== null && _c !== void 0 ? _c : "Nenhum dado para ser exibido." }), (_d = emptyData === null || emptyData === void 0 ? void 0 : emptyData.children) !== null && _d !== void 0 ? _d : null));
    }
    return (React__default["default"].createElement(react.Box, { py: "6", px: "8", borderRadius: "8", w: "full", h: "100%" },
        React__default["default"].createElement(react.Table, __assign({}, getTableProps()),
            React__default["default"].createElement(react.Thead, null, headerGroups.map(function (headerGroup) { return (React__default["default"].createElement(react.Tr, __assign({}, headerGroup.getHeaderGroupProps(), { key: headerGroup.id }), headerGroup.headers.map(function (column) { return (React__default["default"].createElement(React__default["default"].Fragment, { key: column.id },
                React__default["default"].createElement(react.Th, __assign({}, column.getHeaderProps()), column.render("Header")))); }))); })),
            React__default["default"].createElement(react.Tbody, __assign({}, getTableBodyProps()), rows.map(function (row) {
                prepareRow(row);
                return (React__default["default"].createElement(react.Tr, __assign({}, row.getRowProps(), { key: row.id }), row.cells.map(function (cell, index) { return (React__default["default"].createElement(React__default["default"].Fragment, { key: cell.column.id + index },
                    React__default["default"].createElement(react.Td, __assign({}, cell.getCellProps()), cell.render("Cell")))); })));
            }))),
        React__default["default"].createElement(Pagination, __assign({}, pagination, { colorScheme: colorScheme, onPageChange: onPageChange }))));
}

exports.Table = Table;
exports.usePagination = usePagination;
//# sourceMappingURL=index.js.map
