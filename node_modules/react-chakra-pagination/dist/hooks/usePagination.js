var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function generatePagesArray(from, to) {
    return __spreadArray([], new Array(to - from), true).map(function (_, index) { return from + index + 1; })
        .filter(function (page) { return page > 0; });
}
export function usePagination(_a) {
    var totalRegisters = _a.totalRegisters, page = _a.page, items = _a.items, _b = _a.registersPerPage, registersPerPage = _b === void 0 ? 10 : _b, _c = _a.siblingsCount, siblingsCount = _c === void 0 ? 1 : _c;
    var currentPage = page;
    var lastPage = Math.ceil(totalRegisters / registersPerPage);
    var totalPages = lastPage === 0 ? 1 : lastPage;
    var previousPages = currentPage > 1
        ? generatePagesArray(currentPage - 1 - siblingsCount, currentPage - 1)
        : [];
    var nextPages = currentPage < lastPage
        ? generatePagesArray(currentPage, Math.min(currentPage + siblingsCount, lastPage))
        : [];
    var pageStart = (page - 1) * registersPerPage;
    var pageEnd = pageStart + registersPerPage;
    var pageItems = items.slice(pageStart, pageEnd);
    return {
        pageItems: pageItems,
        currentPage: currentPage,
        totalPages: totalPages,
        lastPage: lastPage,
        nextPages: nextPages,
        previousPages: previousPages,
        registersPerPage: registersPerPage,
        siblingsCount: siblingsCount,
    };
}
//# sourceMappingURL=usePagination.js.map