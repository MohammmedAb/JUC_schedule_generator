import * as React from "react";
import { Stack, Text } from "@chakra-ui/react";
import { PaginationItem } from "./PaginationItem";
export function Pagination(_a) {
    var currentPage = _a.currentPage, lastPage = _a.lastPage, previousPages = _a.previousPages, nextPages = _a.nextPages, siblingsCount = _a.siblingsCount, onPageChange = _a.onPageChange, colorScheme = _a.colorScheme;
    return (React.createElement(Stack, { direction: "row", mt: "8", justify: "flex-end", align: "center", spacing: "6" },
        React.createElement(Stack, { direction: "row", spacing: "4" },
            currentPage > 1 + siblingsCount ? (React.createElement(React.Fragment, null,
                React.createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: 1 }),
                currentPage > 2 + siblingsCount ? (React.createElement(Text, { color: "gray.300", w: "8", textAlign: "center" }, "...")) : null)) : null,
            previousPages.length > 0
                ? previousPages.map(function (page) { return (React.createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: page, key: page })); })
                : null,
            React.createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: currentPage, isCurrent: true }),
            nextPages.length > 0
                ? nextPages.map(function (page) { return (React.createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: page, key: page })); })
                : null,
            currentPage + siblingsCount < lastPage ? (React.createElement(React.Fragment, null,
                currentPage + 1 + siblingsCount < lastPage ? (React.createElement(Text, { color: "gray.300", w: "8", textAlign: "center" }, "...")) : null,
                React.createElement(PaginationItem, { colorScheme: colorScheme, onPageChange: onPageChange, page: lastPage }))) : null)));
}
//# sourceMappingURL=Pagination.js.map