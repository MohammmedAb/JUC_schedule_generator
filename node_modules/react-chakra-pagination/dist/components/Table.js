var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from "react";
import { Table as ChakraTable, Thead, Tbody, Tr, Th, Td, Box, } from "@chakra-ui/react";
import { usePagination } from "../hooks/usePagination";
import { useTable } from "react-table";
import { Pagination } from "./Pagination";
export function Table(_a) {
    var page = _a.page, onPageChange = _a.onPageChange, totalRegisters = _a.totalRegisters, data = _a.data, columns = _a.columns, items = _a.items, _b = _a.colorScheme, colorScheme = _b === void 0 ? "teal" : _b;
    var _c = useTable({ columns: columns, data: data }), getTableProps = _c.getTableProps, getTableBodyProps = _c.getTableBodyProps, headerGroups = _c.headerGroups, rows = _c.rows, prepareRow = _c.prepareRow;
    var pagination = usePagination({
        totalRegisters: totalRegisters,
        page: page,
        items: items,
    });
    return (React.createElement(Box, { py: "6", px: "8", borderRadius: "8", w: "full", h: "100%" },
        React.createElement(ChakraTable, __assign({}, getTableProps()),
            React.createElement(Thead, null, headerGroups.map(function (headerGroup) { return (React.createElement(Tr, __assign({}, headerGroup.getHeaderGroupProps(), { key: headerGroup.id }), headerGroup.headers.map(function (column) { return (React.createElement(React.Fragment, { key: column.id },
                React.createElement(Th, __assign({}, column.getHeaderProps()), column.render("Header")))); }))); })),
            React.createElement(Tbody, __assign({}, getTableBodyProps()), rows.map(function (row) {
                prepareRow(row);
                return (React.createElement(Tr, __assign({}, row.getRowProps(), { key: row.id }), row.cells.map(function (cell, index) { return (React.createElement(React.Fragment, { key: cell.column.id + index },
                    React.createElement(Td, __assign({}, cell.getCellProps()), cell.render("Cell")))); })));
            }))),
        React.createElement(Pagination, __assign({}, pagination, { colorScheme: colorScheme, onPageChange: onPageChange }))));
}
//# sourceMappingURL=Table.js.map